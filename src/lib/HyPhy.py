# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HyPhy
else:
    import _HyPhy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


THYPHY_TYPE_COUNT = _HyPhy.THYPHY_TYPE_COUNT
THYPHY_TYPE_STRING = _HyPhy.THYPHY_TYPE_STRING
THYPHY_TYPE_NUMBER = _HyPhy.THYPHY_TYPE_NUMBER
THYPHY_TYPE_MATRIX = _HyPhy.THYPHY_TYPE_MATRIX
THYPHY_TYPE_JSON = _HyPhy.THYPHY_TYPE_JSON
class _THyPhyReturnObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def myType(self):
        return _HyPhy._THyPhyReturnObject_myType(self)
    __swig_destroy__ = _HyPhy.delete__THyPhyReturnObject

    def castToString(self):
        return _HyPhy._THyPhyReturnObject_castToString(self)

    def castToNumber(self):
        return _HyPhy._THyPhyReturnObject_castToNumber(self)

    def castToMatrix(self):
        return _HyPhy._THyPhyReturnObject_castToMatrix(self)

# Register _THyPhyReturnObject in _HyPhy:
_HyPhy._THyPhyReturnObject_swigregister(_THyPhyReturnObject)
class _THyPhyString(_THyPhyReturnObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2=None, arg3=0):
        _HyPhy._THyPhyString_swiginit(self, _HyPhy.new__THyPhyString(arg2, arg3))

    def myType(self):
        return _HyPhy._THyPhyString_myType(self)
    __swig_destroy__ = _HyPhy.delete__THyPhyString
    sLength = property(_HyPhy._THyPhyString_sLength_get, _HyPhy._THyPhyString_sLength_set)
    sData = property(_HyPhy._THyPhyString_sData_get, _HyPhy._THyPhyString_sData_set)

# Register _THyPhyString in _HyPhy:
_HyPhy._THyPhyString_swigregister(_THyPhyString)
class _THyPhyNumber(_THyPhyReturnObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2=0.0):
        _HyPhy._THyPhyNumber_swiginit(self, _HyPhy.new__THyPhyNumber(arg2))

    def myType(self):
        return _HyPhy._THyPhyNumber_myType(self)
    __swig_destroy__ = _HyPhy.delete__THyPhyNumber
    nValue = property(_HyPhy._THyPhyNumber_nValue_get, _HyPhy._THyPhyNumber_nValue_set)

# Register _THyPhyNumber in _HyPhy:
_HyPhy._THyPhyNumber_swigregister(_THyPhyNumber)
class _THyPhyMatrix(_THyPhyReturnObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HyPhy._THyPhyMatrix_swiginit(self, _HyPhy.new__THyPhyMatrix(*args))

    def myType(self):
        return _HyPhy._THyPhyMatrix_myType(self)
    __swig_destroy__ = _HyPhy.delete__THyPhyMatrix

    def MatrixCell(self, arg2, arg3):
        return _HyPhy._THyPhyMatrix_MatrixCell(self, arg2, arg3)
    mRows = property(_HyPhy._THyPhyMatrix_mRows_get, _HyPhy._THyPhyMatrix_mRows_set)
    mCols = property(_HyPhy._THyPhyMatrix_mCols_get, _HyPhy._THyPhyMatrix_mCols_set)
    mData = property(_HyPhy._THyPhyMatrix_mData_get, _HyPhy._THyPhyMatrix_mData_set)

# Register _THyPhyMatrix in _HyPhy:
_HyPhy._THyPhyMatrix_swigregister(_THyPhyMatrix)
class _THyPhy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HyPhy._THyPhy_swiginit(self, _HyPhy.new__THyPhy(*args))
    __swig_destroy__ = _HyPhy.delete__THyPhy

    def ExecuteBF(self, arg2, arg3=True):
        return _HyPhy._THyPhy_ExecuteBF(self, arg2, arg3)

    def InitTHyPhy(self, arg2, arg3, arg4):
        return _HyPhy._THyPhy_InitTHyPhy(self, arg2, arg3, arg4)

    def ClearAll(self):
        return _HyPhy._THyPhy_ClearAll(self)

    def AskFor(self, arg2):
        return _HyPhy._THyPhy_AskFor(self, arg2)

    def DumpResult(self, arg2):
        return _HyPhy._THyPhy_DumpResult(self, arg2)

    def CanCast(self, arg2, arg3):
        return _HyPhy._THyPhy_CanCast(self, arg2, arg3)

    def CastResult(self, arg2, arg3):
        return _HyPhy._THyPhy_CastResult(self, arg2, arg3)

    def SetCallbackHandler(self, arg2):
        return _HyPhy._THyPhy_SetCallbackHandler(self, arg2)

    def GetCallbackHandler(self):
        return _HyPhy._THyPhy_GetCallbackHandler(self)

    def GetWarnings(self):
        return _HyPhy._THyPhy_GetWarnings(self)

    def GetErrors(self):
        return _HyPhy._THyPhy_GetErrors(self)

    def GetStdout(self):
        return _HyPhy._THyPhy_GetStdout(self)

    def PushWarning(self, arg2):
        return _HyPhy._THyPhy_PushWarning(self, arg2)

    def PushError(self, arg2):
        return _HyPhy._THyPhy_PushError(self, arg2)

    def PushOutString(self, arg2):
        return _HyPhy._THyPhy_PushOutString(self, arg2)

# Register _THyPhy in _HyPhy:
_HyPhy._THyPhy_swigregister(_THyPhy)

def _THyPhyGetLongStatus():
    return _HyPhy._THyPhyGetLongStatus()

def _THyPhyGetStringStatus():
    return _HyPhy._THyPhyGetStringStatus()

def _THyPhyGetDoubleStatus():
    return _HyPhy._THyPhyGetDoubleStatus()

cvar = _HyPhy.cvar

