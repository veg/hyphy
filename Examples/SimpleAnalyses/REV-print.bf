/* This is an example HY-PHY Batch File.   It reads in a '#' nucleotide dataset data/hiv.nuc and estimates   maximum ln-likelihood based on the tree contained in the data file,   using the General Reversible model with all 6 parameters   estimated independently for all branches.      Output is printed out as a Newick Style tree with branch lengths   representing the number of expected substitutions per branch (which   is the default setting for nucleotide models w/o rate variation).         Sergei L. Kosakovsky Pond and Spencer V. Muse    December 1999. *//* 1. Read in the data and store the result in a DataSet variable.*/DataSet 		nucleotideSequences = ReadDataFile ("data/hiv.nuc");   /* 2. Filter the data, specifying that all of the data is to be used	  and that it is to be treated as nucleotides.*/	  DataSetFilter	filteredData = CreateFilter (nucleotideSequences,1);/* 3. Collect observed nucleotide frequencies from the filtered data. observedFreqs will	  store the vector of frequencies. */HarvestFrequencies (observedFreqs, filteredData, 1, 1, 1);/* 4. Define the KHY substitution matrix. '*' is defined to be -(sum of off-diag row elements) */REVRateMatrix = 		{{*,a,b,c}		 {a,*,d,e}		 {b,d,*,f}		 {c,e,f,*}};		 /*5.  Define the REV model, by combining the substitution matrix with the vector of observed (equilibrium)	  frequencies. */	  Model REV	 = (REVRateMatrix, observedFreqs);/*6.  Now we can define the tree variable, using the tree string read from the data file,	  and, by default, assigning the last defined model (REV) to all tree branches. */	  Tree	givenTree = DATAFILE_TREE;/*7.  Since all the likelihood function ingredients (data, tree, equilibrium frequencies)	  have been defined we are ready to construct the likelihood function. */	  LikelihoodFunction  theLnLik = (filteredData, givenTree);/*8.  Maximize the likelihood function, storing parameter values in the matrix paramValues */Optimize (paramValues, theLnLik);for (k = 0; k < Columns (paramValues); k+=1) {    GetString (parameter_name, theLnLik,k);    fprintf (stdout, parameter_name, " = ", paramValues[0][k], " : ", Eval (parameter_name), "\n");    }return 0;/*9.  Print the tree with optimal branch lengths to the console. */fprintf  (stdout, theLnLik);function print_rate (rate, branch_length) {    return "|" + Format (Eval (rate) / branch_length, 12,4) + "   ";}for (branch_name; in; givenTree) {    GetInformation (rate_matrix, ^("givenTree." + branch_name));        // rate_matrix stores the numerical estimate of the rate matrix (4x4), multiplied by base-frequencies, i.e. r_ij * pi_j            branch_length = BranchLength (givenTree, branch_name);    // rate_matrix is not normalized, so each rate is scaled by the overall branch length    // before printing the rates, we can normalize all of them by the branch, length so you get something like expected subs/site == 1    // you can do this by dividing each entry of the rate matrix by the branch length (assuming the latter is non-zero)    fprintf (stdout, "\nTree branch ", branch_name, " (length = ", branch_length, ")\n");        // parameter estimates will be stored in variables like tree_name.node_name.parameter_name        fprintf (stdout, "\n", "  |       A       |       C       |       G       |       T       |");    fprintf (stdout, "\n", "  |---------------|---------------|---------------|---------------|");    fprintf (stdout, "\n", "A |       *       ", print_rate ("givenTree.`branch_name`.a", branch_length), print_rate ("givenTree.`branch_name`.b", branch_length),print_rate ("givenTree.`branch_name`.c", branch_length),"|");    fprintf (stdout, "\n", "C ", print_rate ("givenTree.`branch_name`.a", branch_length), "|       *       ", print_rate ("givenTree.`branch_name`.d", branch_length),print_rate ("givenTree.`branch_name`.e", branch_length),"|");    fprintf (stdout, "\n", "G ", print_rate ("givenTree.`branch_name`.b", branch_length), print_rate ("givenTree.`branch_name`.d", branch_length), "|       *       ", print_rate ("givenTree.`branch_name`.f", branch_length), "|");    fprintf (stdout, "\n", "T ", print_rate ("givenTree.`branch_name`.c", branch_length), print_rate ("givenTree.`branch_name`.e", branch_length),print_rate ("givenTree.`branch_name`.f", branch_length),"|       *       |\n");   }   